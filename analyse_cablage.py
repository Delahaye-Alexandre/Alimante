#!/usr/bin/env python3
"""
Analyse de c√¢blage pour Alimante
V√©rifie la coh√©rence entre les contr√¥leurs et la configuration GPIO
"""

import json
import sys
from typing import Dict, Any, List, Set

def load_gpio_config():
    """Charge la configuration GPIO"""
    try:
        with open('config/gpio_config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Erreur chargement GPIO config: {e}")
        return None

def analyze_controllers():
    """Analyse les contr√¥leurs disponibles"""
    print("üîç Analyse des contr√¥leurs...")
    
    # Contr√¥leurs d√©finis dans l'application
    app_controllers = {
        'temperature': {
            'sensor': 'DHT22',
            'actuator': 'heating_relay',
            'pins_needed': ['temp_humidity', 'heating_relay']
        },
        'humidity': {
            'sensor': 'DHT22', 
            'actuator': 'humidity_relay',
            'pins_needed': ['temp_humidity', 'humidity_relay']
        },
        'light': {
            'sensor': 'LDR',
            'actuator': 'light_relay',
            'pins_needed': ['light', 'light_relay']
        },
        'feeding': {
            'actuator': 'feeding_servo',
            'pins_needed': ['feeding_servo']
        },
        'fan': {
            'actuator': 'fan_relay',
            'pins_needed': ['fan_relay']
        },
        'buzzer': {
            'actuator': 'buzzer',
            'pins_needed': ['buzzer']
        },
        'air_quality': {
            'sensor': 'MQ135',
            'pins_needed': ['air_quality']
        },
        'lcd_menu': {
            'display': 'ST7735',
            'pins_needed': ['lcd_display', 'menu_up_button', 'menu_down_button', 'menu_select_button', 'menu_back_button']
        }
    }
    
    return app_controllers

def analyze_gpio_pins(gpio_config):
    """Analyse les pins GPIO configur√©s"""
    print("üîç Analyse des pins GPIO...")
    
    if not gpio_config or 'pins' not in gpio_config:
        print("‚ùå Configuration GPIO invalide")
        return None
    
    pins = gpio_config['pins']
    all_pins = {}
    
    # Collecter tous les pins
    for category, components in pins.items():
        for name, config in components.items():
            all_pins[name] = {
                'pin': config.get('pin'),
                'type': config.get('type'),
                'voltage': config.get('voltage'),
                'category': category
            }
    
    return all_pins

def check_controller_gpio_mapping(app_controllers, gpio_pins):
    """V√©rifie la correspondance entre contr√¥leurs et pins GPIO"""
    print("üîç V√©rification correspondance contr√¥leurs ‚Üî GPIO...")
    
    issues = []
    missing_pins = []
    unused_pins = []
    
    # V√©rifier que chaque contr√¥leur a ses pins n√©cessaires
    for controller_name, controller_info in app_controllers.items():
        print(f"\nüéõÔ∏è Contr√¥leur: {controller_name}")
        
        for pin_name in controller_info.get('pins_needed', []):
            if pin_name in gpio_pins:
                pin_info = gpio_pins[pin_name]
                print(f"   ‚úÖ {pin_name}: GPIO {pin_info['pin']} ({pin_info['type']})")
            else:
                print(f"   ‚ùå {pin_name}: MANQUANT")
                missing_pins.append(f"{controller_name}.{pin_name}")
                issues.append(f"Pin manquant pour {controller_name}: {pin_name}")
    
    # V√©rifier les pins non utilis√©s
    used_pins = set()
    for controller_info in app_controllers.values():
        for pin_name in controller_info.get('pins_needed', []):
            used_pins.add(pin_name)
    
    for pin_name, pin_info in gpio_pins.items():
        if pin_name not in used_pins:
            unused_pins.append(pin_name)
            print(f"   ‚ö†Ô∏è {pin_name}: Non utilis√© par les contr√¥leurs")
    
    return issues, missing_pins, unused_pins

def check_voltage_consistency(gpio_pins):
    """V√©rifie la coh√©rence des tensions"""
    print("\nüîç V√©rification coh√©rence des tensions...")
    
    voltage_issues = []
    
    # V√©rifier les composants 3.3V
    components_3v3 = []
    components_5v = []
    
    for pin_name, pin_info in gpio_pins.items():
        voltage = pin_info.get('voltage', 'N/A')
        if voltage == '3.3V':
            components_3v3.append(pin_name)
        elif voltage == '5V':
            components_5v.append(pin_name)
    
    print(f"   üìä Composants 3.3V: {len(components_3v3)}")
    for comp in components_3v3:
        print(f"      - {comp}")
    
    print(f"   üìä Composants 5V: {len(components_5v)}")
    for comp in components_5v:
        print(f"      - {comp}")
    
    return voltage_issues

def check_power_requirements(gpio_config):
    """V√©rifie les besoins en alimentation"""
    print("\nüîç Analyse des besoins en alimentation...")
    
    if 'power_supply' not in gpio_config:
        print("   ‚ö†Ô∏è Section power_supply manquante")
        return
    
    power_config = gpio_config['power_supply']
    
    print("   üìä Configuration alimentation:")
    for key, value in power_config.items():
        print(f"      - {key}: {value}")
    
    # V√©rifier les tensions sp√©ciales
    if 'led_strip_voltage' in power_config and power_config['led_strip_voltage'] == '12V':
        print("   ‚úÖ Bandeau LED 12V configur√©")
    
    if 'sensors_voltage' in power_config and power_config['sensors_voltage'] == '3.3V':
        print("   ‚úÖ Capteurs 3.3V configur√©s")

def generate_wiring_summary(gpio_pins, app_controllers):
    """G√©n√®re un r√©sum√© du c√¢blage"""
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DU C√ÇBLAGE")
    print("=" * 60)
    
    # Par cat√©gorie
    categories = {
        'sensors': [],
        'actuators': [],
        'inputs': [],
        'status': []
    }
    
    for pin_name, pin_info in gpio_pins.items():
        category = pin_info.get('category', 'unknown')
        if category in categories:
            categories[category].append({
                'name': pin_name,
                'pin': pin_info['pin'],
                'type': pin_info['type'],
                'voltage': pin_info['voltage']
            })
    
    for category, components in categories.items():
        if components:
            print(f"\nüîß {category.upper()}:")
            for comp in components:
                status = "‚úÖ" if any(comp['name'] in c.get('pins_needed', []) for c in app_controllers.values()) else "‚ö†Ô∏è"
                print(f"   {status} {comp['name']}: GPIO {comp['pin']} ({comp['type']}) - {comp['voltage']}")

def main():
    """Programme principal"""
    print("üß™ Analyse de C√¢blage Alimante")
    print("=" * 50)
    
    # Charger la configuration
    gpio_config = load_gpio_config()
    if not gpio_config:
        return False
    
    # Analyser les contr√¥leurs
    app_controllers = analyze_controllers()
    
    # Analyser les pins GPIO
    gpio_pins = analyze_gpio_pins(gpio_config)
    if not gpio_pins:
        return False
    
    # V√©rifications
    issues, missing_pins, unused_pins = check_controller_gpio_mapping(app_controllers, gpio_pins)
    check_voltage_consistency(gpio_pins)
    check_power_requirements(gpio_config)
    
    # R√©sum√©
    generate_wiring_summary(gpio_pins, app_controllers)
    
    # Rapport final
    print("\n" + "=" * 60)
    print("üìä RAPPORT FINAL")
    print("=" * 60)
    
    if issues:
        print(f"‚ùå Probl√®mes d√©tect√©s: {len(issues)}")
        for issue in issues:
            print(f"   - {issue}")
    else:
        print("‚úÖ Aucun probl√®me de c√¢blage d√©tect√©")
    
    if missing_pins:
        print(f"‚ö†Ô∏è Pins manquants: {len(missing_pins)}")
        for pin in missing_pins:
            print(f"   - {pin}")
    
    if unused_pins:
        print(f"‚ÑπÔ∏è Pins non utilis√©s: {len(unused_pins)}")
        for pin in unused_pins:
            print(f"   - {pin}")
    
    # Recommandations
    print("\nüí° Recommandations:")
    if missing_pins:
        print("   - Ajouter les pins manquants dans la configuration")
    if unused_pins:
        print("   - V√©rifier si les pins non utilis√©s sont n√©cessaires")
    if not issues and not missing_pins:
        print("   - Le c√¢blage semble correct !")
    
    return len(issues) == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
