#!/usr/bin/env python3
"""
Test de la gestion des ventilateurs et de leur int√©gration avec la qualit√© de l'air
"""

import sys
import os
import time
import asyncio
sys.path.insert(0, '.')

from src.controllers.air_quality_controller import AirQualityController
from src.controllers.fan_controller import FanController
from src.utils.gpio_manager import GPIOManager

def test_fan_management():
    """Test la gestion des ventilateurs et leur lien avec la qualit√© de l'air"""
    print("üå™Ô∏è Test de la gestion des ventilateurs")
    print("=" * 60)
    
    try:
        # Configuration de test
        air_quality_config = {
            "pin": 27,
            "voltage": "5V",
            "current": 120
        }
        
        fan_config = {
            "count": 4,
            "relay_pin": 25,
            "voltage": "5V",
            "current_per_fan": "200mA",
            "total_current": "800mA"
        }
        
        # Initialiser GPIO (simulation)
        gpio_manager = GPIOManager()
        
        # Cr√©er les contr√¥leurs
        air_quality_controller = AirQualityController(gpio_manager, air_quality_config)
        fan_controller = FanController(gpio_manager, fan_config)
        
        print("‚úÖ Contr√¥leurs cr√©√©s")
        
        # Test 1: Calibration du capteur de qualit√© de l'air
        print("\nüîß Test de calibration du capteur...")
        success = air_quality_controller.calibrate_sensor()
        print(f"   Calibration: {'‚úÖ Succ√®s' if success else '‚ùå √âchec'}")
        
        if not success:
            print("‚ùå Impossible de continuer sans calibration")
            return False
        
        # Test 2: Simulation de diff√©rents niveaux de qualit√© de l'air
        print("\nüìä Test de diff√©rents niveaux de qualit√© de l'air...")
        
        test_scenarios = [
            {"name": "Air excellent", "ppm": 25, "expected_speed": 0},
            {"name": "Air bon", "ppm": 75, "expected_speed": 25},
            {"name": "Air mod√©r√©", "ppm": 125, "expected_speed": 50},
            {"name": "Air mauvais", "ppm": 175, "expected_speed": 75},
            {"name": "Air malsain", "ppm": 250, "expected_speed": 100},
            {"name": "Air tr√®s malsain", "ppm": 350, "expected_speed": 100}
        ]
        
        for scenario in test_scenarios:
            print(f"\n   üìä Sc√©nario: {scenario['name']}")
            print(f"      PPM simul√©: {scenario['ppm']}")
            print(f"      Vitesse attendue: {scenario['expected_speed']}%")
            
            # Simuler la lecture (on modifie temporairement la m√©thode)
            original_read = air_quality_controller._read_raw_sensor
            
            def mock_read():
                return scenario['ppm']
            
            air_quality_controller._read_raw_sensor = mock_read
            
            # Lire la qualit√© de l'air
            reading = air_quality_controller.read_air_quality()
            if reading:
                print(f"      Qualit√© d√©tect√©e: {reading['quality_level']}")
                print(f"      PPM mesur√©: {reading['ppm']:.1f}")
                print(f"      Vitesse ventilateurs: {reading['fan_speed']}%")
                
                # Contr√¥ler la ventilation
                success = air_quality_controller.control_ventilation(fan_controller)
                print(f"      Contr√¥le ventilation: {'‚úÖ Succ√®s' if success else '‚ùå √âchec'}")
                
                # V√©rifier le statut des ventilateurs
                fan_status = fan_controller.get_status()
                print(f"      Ventilateurs actifs: {fan_status['fans_active']}")
                print(f"      Vitesse actuelle: {fan_status['current_speed']}%")
                
                # V√©rifier que la vitesse correspond √† l'attendu
                if fan_status['current_speed'] == scenario['expected_speed']:
                    print(f"      ‚úÖ Vitesse correcte")
                else:
                    print(f"      ‚ö†Ô∏è Vitesse diff√©rente de l'attendu")
            else:
                print("      ‚ùå √âchec de lecture")
            
            # Restaurer la m√©thode originale
            air_quality_controller._read_raw_sensor = original_read
            
            time.sleep(1)  # Pause entre les sc√©narios
        
        # Test 3: Contr√¥le autonome des ventilateurs
        print("\nüå°Ô∏è Test du contr√¥le autonome des ventilateurs...")
        
        # Simuler des conditions de temp√©rature et humidit√©
        temp_scenarios = [
            {"temp": 20.0, "humidity": 50.0, "should_activate": False},
            {"temp": 30.0, "humidity": 60.0, "should_activate": True},
            {"temp": 25.0, "humidity": 85.0, "should_activate": True},
            {"temp": 35.0, "humidity": 90.0, "should_activate": True}
        ]
        
        for scenario in temp_scenarios:
            print(f"\n   üå°Ô∏è Sc√©nario: Temp={scenario['temp']}¬∞C, Humidit√©={scenario['humidity']}%")
            
            success = fan_controller.control_ventilation(
                temperature=scenario['temp'],
                humidity=scenario['humidity']
            )
            
            fan_status = fan_controller.get_status()
            print(f"      R√©sultat: {'‚úÖ Succ√®s' if success else '‚ùå √âchec'}")
            print(f"      Ventilateurs actifs: {fan_status['fans_active']}")
            print(f"      Vitesse: {fan_status['current_speed']}%")
            
            # V√©rifier la logique
            if scenario['should_activate'] == fan_status['fans_active']:
                print(f"      ‚úÖ Logique correcte")
            else:
                print(f"      ‚ö†Ô∏è Logique diff√©rente de l'attendu")
            
            time.sleep(1)
        
        # Test 4: Gestion des erreurs
        print("\n‚ö†Ô∏è Test de la gestion des erreurs...")
        
        # Test avec un pin GPIO invalide
        try:
            invalid_fan_config = fan_config.copy()
            invalid_fan_config['relay_pin'] = 999  # Pin invalide
            
            invalid_fan_controller = FanController(gpio_manager, invalid_fan_config)
            print("   ‚ùå Le contr√¥leur aurait d√ª √©chouer avec un pin invalide")
        except Exception as e:
            print(f"   ‚úÖ Gestion d'erreur correcte: {type(e).__name__}")
        
        # Nettoyage
        print("\nüßπ Nettoyage...")
        air_quality_controller.cleanup()
        fan_controller.cleanup()
        gpio_manager.cleanup()
        
        print("‚úÖ Test termin√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_species_configurations():
    """Test les configurations de ventilation des diff√©rentes esp√®ces"""
    print("\nüêõ Test des configurations de ventilation par esp√®ce")
    print("=" * 60)
    
    try:
        from src.utils.config_manager import SystemConfig
        
        # Charger la configuration
        config = SystemConfig.from_json(
            'config/config.json',
            'config/orthopteres/mantidae/mantis_religiosa.json',
            'config/gpio_config.json'
        )
        
        # V√©rifier la configuration de ventilation
        if hasattr(config, 'ventilation'):
            ventilation_config = config.ventilation
            print(f"‚úÖ Configuration de ventilation trouv√©e pour {config.species_name}")
            print(f"   Nombre de ventilateurs: {ventilation_config.get('fan_count', 'N/A')}")
            print(f"   Mode automatique: {ventilation_config.get('auto_mode', 'N/A')}")
            print(f"   Seuil temp√©rature: {ventilation_config.get('temperature_threshold', 'N/A')}¬∞C")
            print(f"   Seuil humidit√©: {ventilation_config.get('humidity_threshold', 'N/A')}%")
        else:
            print("‚ùå Configuration de ventilation manquante")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des configurations: {e}")
        return False

async def test_integration():
    """Test l'int√©gration compl√®te du syst√®me"""
    print("\nüîó Test d'int√©gration compl√®te")
    print("=" * 60)
    
    try:
        from src.utils.config_manager import SystemConfig
        from main import initialize_system, run_system_loop
        
        # Charger la configuration
        config = SystemConfig.from_json(
            'config/config.json',
            'config/orthopteres/mantidae/mantis_religiosa.json',
            'config/gpio_config.json'
        )
        
        print("‚úÖ Configuration charg√©e")
        
        # Initialiser le syst√®me
        controllers = initialize_system(config)
        
        if not controllers:
            print("‚ùå Aucun contr√¥leur initialis√©")
            return False
        
        print(f"‚úÖ {len(controllers)} contr√¥leurs initialis√©s")
        
        # V√©rifier la pr√©sence des contr√¥leurs de ventilation
        required_controllers = ['air_quality', 'fan']
        for controller_name in required_controllers:
            if controller_name in controllers:
                print(f"‚úÖ Contr√¥leur {controller_name} pr√©sent")
            else:
                print(f"‚ùå Contr√¥leur {controller_name} manquant")
                return False
        
        # Test de la boucle principale (version courte)
        print("\nüîÑ Test de la boucle principale (version courte)...")
        
        # Ex√©cuter quelques cycles
        for i in range(3):
            print(f"   Cycle {i+1}/3...")
            
            # Contr√¥le de la qualit√© de l'air et ventilation
            if 'air_quality' in controllers and 'fan' in controllers:
                try:
                    success = controllers['air_quality'].control_ventilation(controllers['fan'])
                    print(f"      Contr√¥le ventilation: {'‚úÖ Succ√®s' if success else '‚ùå √âchec'}")
                except Exception as e:
                    print(f"      ‚ùå Erreur: {e}")
            
            await asyncio.sleep(1)
        
        # Nettoyage
        print("\nüßπ Nettoyage...")
        for controller_name, controller in controllers.items():
            try:
                if hasattr(controller, 'cleanup'):
                    controller.cleanup()
                    print(f"   ‚úÖ {controller_name} nettoy√©")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur nettoyage {controller_name}: {e}")
        
        print("‚úÖ Test d'int√©gration termin√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'int√©gration: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Programme principal"""
    print("üöÄ Test complet de la gestion des ventilateurs")
    print("=" * 80)
    
    # Test 1: Gestion des ventilateurs
    success1 = test_fan_management()
    
    # Test 2: Configurations des esp√®ces
    success2 = test_species_configurations()
    
    # Test 3: Int√©gration compl√®te
    print("\n" + "="*80)
    success3 = asyncio.run(test_integration())
    
    # R√©sum√©
    print("\n" + "="*80)
    print("üìä R√âSUM√â DES TESTS")
    print("="*80)
    print(f"‚úÖ Gestion des ventilateurs: {'Succ√®s' if success1 else '√âchec'}")
    print(f"‚úÖ Configurations des esp√®ces: {'Succ√®s' if success2 else '√âchec'}")
    print(f"‚úÖ Int√©gration compl√®te: {'Succ√®s' if success3 else '√âchec'}")
    
    if all([success1, success2, success3]):
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s !")
        print("La gestion des ventilateurs est correctement int√©gr√©e.")
        return True
    else:
        print("\n‚ùå Certains tests ont √©chou√©.")
        print("V√©rifiez les erreurs ci-dessus.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
