#!/usr/bin/env python3
"""
Tests pour l'architecture Alimante
Valide la s√©paration des couches et les services
"""

import sys
import os
import tempfile
import shutil
from pathlib import Path
from datetime import datetime

# Ajouter src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from src.services.system_service import system_service, SystemMetrics
from src.services.control_service import control_service, ControlResult
from src.services.config_service import config_service
from src.services.sensor_service import sensor_service, SensorReading
from src.utils.exceptions import ErrorCode, create_exception


class MockController:
    """Contr√¥leur simul√© pour les tests"""
    
    def __init__(self, name: str):
        self.name = name
        self.status = "ok"
        self.error_count = 0
    
    def get_status(self):
        return {
            "status": self.status,
            "error_count": self.error_count,
            "current_temperature": 25.0,
            "current_humidity": 60.0,
            "heating_active": False,
            "sprayer_active": False
        }
    
    def check_status(self):
        return self.status == "ok"
    
    def control_temperature(self):
        return True
    
    def control_humidity(self):
        return True
    
    def control_lighting(self):
        return True
    
    def control_feeding(self):
        return True
    
    def cleanup(self):
        pass


class MockSensor:
    """Capteur simul√© pour les tests"""
    
    def __init__(self, sensor_type: str):
        self.sensor_type = sensor_type
        self.value = 25.0
    
    def read(self):
        return self.value
    
    def get_temperature(self):
        return self.value
    
    def get_humidity(self):
        return 60.0
    
    def cleanup(self):
        pass


def test_system_service():
    """Test le service syst√®me"""
    print("üß™ Test service syst√®me...")
    
    # R√©initialiser le service
    system_service.controllers.clear()
    system_service.metrics_history.clear()
    system_service.error_history.clear()
    
    # Enregistrer des contr√¥leurs simul√©s
    mock_temp = MockController("temperature")
    mock_humidity = MockController("humidity")
    
    system_service.register_controller("temperature", mock_temp)
    system_service.register_controller("humidity", mock_humidity)
    
    # Test r√©cup√©ration statut
    status = system_service.get_system_status()
    assert "controllers" in status
    assert "temperature" in status["controllers"]
    assert "humidity" in status["controllers"]
    
    # Test m√©triques
    metrics = system_service.get_system_metrics()
    assert isinstance(metrics, SystemMetrics)
    assert metrics.temperature is not None
    assert metrics.humidity is not None
    
    # Test sant√© syst√®me
    health = system_service.get_system_health()
    assert "status" in health
    assert "checks" in health
    
    print("‚úÖ Service syst√®me OK")


def test_control_service():
    """Test le service de contr√¥le"""
    print("üß™ Test service de contr√¥le...")
    
    # R√©initialiser le service
    control_service.controllers.clear()
    control_service.action_history.clear()
    
    # Enregistrer des contr√¥leurs simul√©s
    mock_temp = MockController("temperature")
    mock_humidity = MockController("humidity")
    
    control_service.register_controller("temperature", mock_temp)
    control_service.register_controller("humidity", mock_humidity)
    
    # Test action simple
    result = control_service.execute_control_action("temperature")
    assert "status" in result
    assert result["status"] == "success"
    
    # Test actions multiples
    result = control_service.execute_multiple_actions(["temperature", "humidity"])
    assert "status" in result
    assert "results" in result
    assert "temperature" in result["results"]
    assert "humidity" in result["results"]
    
    # Test statut contr√¥leurs
    status = control_service.get_all_controllers_status()
    assert "temperature" in status
    assert "humidity" in status
    
    print("‚úÖ Service de contr√¥le OK")


def test_config_service():
    """Test le service de configuration"""
    print("üß™ Test service de configuration...")
    
    # Cr√©er un dossier temporaire
    temp_dir = tempfile.mkdtemp()
    original_cwd = os.getcwd()
    
    try:
        os.chdir(temp_dir)
        
        # Cr√©er des fichiers de configuration de test
        os.makedirs("config/orthopteres/mantidae", exist_ok=True)
        
        # Configuration syst√®me
        system_config = {
            "serial_port": "/dev/ttyUSB0",
            "baud_rate": 9600,
            "location": {
                "latitude": 48.8566,
                "longitude": 2.3522
            }
        }
        
        with open("config/config.json", "w") as f:
            import json
            json.dump(system_config, f)
        
        # Configuration esp√®ce
        species_config = {
            "temperature": {
                "optimal": 25.0,
                "tolerance": 2.0
            },
            "humidity": {
                "optimal": 60.0,
                "tolerance": 5.0
            },
            "feeding": {
                "interval_hours": 24
            }
        }
        
        with open("config/orthopteres/mantidae/mantis_religiosa.json", "w") as f:
            json.dump(species_config, f)
        
        # Test chargement configuration
        config = config_service.load_config("system")
        assert "serial_port" in config
        assert config["serial_port"] == "/dev/ttyUSB0"
        
        # Test validation configuration
        validation = config_service.validate_config(species_config, "species")
        assert validation["valid"] is True
        
        # Test informations configuration
        info = config_service.get_config_info("system")
        assert info["exists"] is True
        assert info["type"] == "system"
        
        print("‚úÖ Service de configuration OK")
        
    finally:
        os.chdir(original_cwd)
        shutil.rmtree(temp_dir)


def test_sensor_service():
    """Test le service de capteurs"""
    print("üß™ Test service de capteurs...")
    
    # R√©initialiser le service
    sensor_service.sensors.clear()
    sensor_service.readings_history.clear()
    sensor_service.calibrations.clear()
    
    # Enregistrer des capteurs simul√©s
    mock_temp_sensor = MockSensor("temperature")
    mock_humidity_sensor = MockSensor("humidity")
    
    sensor_service.register_sensor("temp_sensor", "temperature", mock_temp_sensor)
    sensor_service.register_sensor("humidity_sensor", "humidity", mock_humidity_sensor)
    
    # Test lecture capteur
    reading = sensor_service.read_sensor("temp_sensor")
    assert isinstance(reading, SensorReading)
    assert reading.sensor_id == "temp_sensor"
    assert reading.value == 25.0
    assert reading.unit == "¬∞C"
    
    # Test lecture tous les capteurs
    readings = sensor_service.read_all_sensors()
    assert "temp_sensor" in readings
    assert "humidity_sensor" in readings
    
    # Test statut capteur
    status = sensor_service.get_sensor_status("temp_sensor")
    assert "sensor_id" in status
    assert status["sensor_id"] == "temp_sensor"
    
    # Test calibration
    reference_values = [(20.0, 20.0), (30.0, 30.0)]
    success = sensor_service.calibrate_sensor("temp_sensor", reference_values)
    assert success is True
    
    # Test statistiques
    stats = sensor_service.get_sensor_statistics("temp_sensor", hours=1)
    assert "sensor_id" in stats
    assert "statistics" in stats
    
    print("‚úÖ Service de capteurs OK")


def test_service_integration():
    """Test l'int√©gration des services"""
    print("üß™ Test int√©gration des services...")
    
    # R√©initialiser tous les services
    system_service.controllers.clear()
    control_service.controllers.clear()
    sensor_service.sensors.clear()
    
    # Cr√©er des contr√¥leurs/capteurs simul√©s
    mock_temp = MockController("temperature")
    mock_humidity = MockController("humidity")
    mock_temp_sensor = MockSensor("temperature")
    mock_humidity_sensor = MockSensor("humidity")
    
    # Enregistrer dans les services
    system_service.register_controller("temperature", mock_temp)
    system_service.register_controller("humidity", mock_humidity)
    
    control_service.register_controller("temperature", mock_temp)
    control_service.register_controller("humidity", mock_humidity)
    
    sensor_service.register_sensor("temp_sensor", "temperature", mock_temp_sensor)
    sensor_service.register_sensor("humidity_sensor", "humidity", mock_humidity_sensor)
    
    # Test flux complet
    # 1. Lire les capteurs
    readings = sensor_service.read_all_sensors()
    assert len(readings) == 2
    
    # 2. R√©cup√©rer les m√©triques syst√®me
    metrics = system_service.get_system_metrics()
    assert metrics.temperature is not None
    
    # 3. Ex√©cuter des actions de contr√¥le
    result = control_service.execute_multiple_actions(["temperature", "humidity"])
    assert result["status"] == "success"
    
    # 4. V√©rifier le statut syst√®me
    status = system_service.get_system_status()
    assert "controllers" in status
    
    print("‚úÖ Int√©gration des services OK")


def test_error_handling():
    """Test la gestion d'erreurs dans les services"""
    print("üß™ Test gestion d'erreurs...")
    
    # Test service syst√®me avec erreur
    try:
        system_service.get_system_status()
    except Exception as e:
        assert isinstance(e, create_exception)
        assert e.error_code == ErrorCode.SERVICE_UNAVAILABLE
    
    # Test service de contr√¥le avec action inexistante
    try:
        control_service.execute_control_action("inexistant")
    except Exception as e:
        assert isinstance(e, create_exception)
        assert e.error_code == ErrorCode.API_INVALID_REQUEST
    
    # Test service de capteurs avec capteur inexistant
    try:
        sensor_service.read_sensor("inexistant")
    except Exception as e:
        assert isinstance(e, create_exception)
        assert e.error_code == ErrorCode.SENSOR_INIT_FAILED
    
    print("‚úÖ Gestion d'erreurs OK")


def test_service_cleanup():
    """Test le nettoyage des services"""
    print("üß™ Test nettoyage des services...")
    
    # Ajouter des donn√©es de test
    mock_controller = MockController("test")
    system_service.register_controller("test", mock_controller)
    control_service.register_controller("test", mock_controller)
    
    mock_sensor = MockSensor("temperature")
    sensor_service.register_sensor("test_sensor", "temperature", mock_sensor)
    
    # V√©rifier que les donn√©es sont pr√©sentes
    assert len(system_service.controllers) > 0
    assert len(control_service.controllers) > 0
    assert len(sensor_service.sensors) > 0
    
    # Nettoyer les services
    system_service.cleanup()
    control_service.cleanup()
    sensor_service.cleanup()
    
    # V√©rifier que les donn√©es sont vid√©es
    assert len(system_service.controllers) == 0
    assert len(control_service.controllers) == 0
    assert len(sensor_service.sensors) == 0
    
    print("‚úÖ Nettoyage des services OK")


def main():
    """Ex√©cute tous les tests d'architecture"""
    print("üß™ Tests de l'architecture Alimante")
    print("=" * 60)
    
    tests = [
        ("Service syst√®me", test_system_service),
        ("Service de contr√¥le", test_control_service),
        ("Service de configuration", test_config_service),
        ("Service de capteurs", test_sensor_service),
        ("Int√©gration des services", test_service_integration),
        ("Gestion d'erreurs", test_error_handling),
        ("Nettoyage des services", test_service_cleanup),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã Test: {test_name}")
        try:
            test_func()
            print(f"‚úÖ {test_name} - PASS√â")
            passed += 1
        except Exception as e:
            print(f"‚ùå {test_name} - √âCHOU√â: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä R√©sultats: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("üéâ Tous les tests d'architecture sont pass√©s !")
        print("‚úÖ L'architecture avec services fonctionne correctement.")
        print("\nüèóÔ∏è Architecture impl√©ment√©e:")
        print("   - Service syst√®me (m√©triques, statut, sant√©)")
        print("   - Service de contr√¥le (actions, historique)")
        print("   - Service de configuration (chargement, validation)")
        print("   - Service de capteurs (lectures, calibration)")
    else:
        print("‚ö†Ô∏è Certains tests d'architecture ont √©chou√©.")
        print("üîß V√©rifiez les erreurs ci-dessus.")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 