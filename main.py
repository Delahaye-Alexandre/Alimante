"""
main.py
Point d'entr√©e du programme pour la gestion des mantes avec Raspberry Pi.
"""

import sys
import asyncio
from typing import Dict, Any

# Imports corrects depuis les packages src
from src.utils.config_manager import SystemConfig
from src.utils.gpio_manager import GPIOManager
from src.utils.logging_config import get_logger, log_system_start, log_system_stop, log_controller_action
from src.utils.exceptions import (
    AlimanteException, 
    ErrorCode, 
    create_exception,
    SystemException,
    GPIOException,
    ControllerException
)
from src.controllers.temperature_controller import TemperatureController
from src.controllers.light_controller import LightController
from src.controllers.humidity_controller import HumidityController
from src.controllers.feeding_controller import FeedingController
from src.controllers.air_quality_controller import AirQualityController
from src.controllers.fan_controller import FanController
from src.utils.select_config import select_config

logger = get_logger("main")

def initialize_system(config: SystemConfig) -> Dict[str, Any]:
    """Initialize all system components with GPIO
    
    Returns:
        dict: Dictionary of controller instances
    Raises:
        SystemException: If initialization fails
    """
    try:
        logger.info("üîß Initialisation du syst√®me Alimante")
        
        # Initialisation GPIO
        gpio_manager = GPIOManager()
        
        if not gpio_manager.initialized:
            raise create_exception(
                ErrorCode.GPIO_INIT_FAILED,
                "Impossible d'initialiser le GPIO",
                {"gpio_status": "failed"}
            )
        
        logger.info("‚úÖ GPIO initialis√© avec succ√®s")
        
        # Initialisation des contr√¥leurs
        controllers = {}
        
        # Pr√©parer la configuration compl√®te avec GPIO pour chaque contr√¥leur
        temp_config = config.temperature.copy()
        temp_config['gpio_config'] = config.gpio_config
        
        humidity_config = config.humidity.copy()
        humidity_config['gpio_config'] = config.gpio_config
        
        light_config = config.location.copy()
        light_config['gpio_config'] = config.gpio_config
        
        feeding_config = config.feeding.copy()
        feeding_config['gpio_config'] = config.gpio_config
        
        # Configuration pour la qualit√© de l'air et les ventilateurs
        air_quality_config = {
            "pin": config.gpio_config.pin_assignments.get("AIR_QUALITY_PIN", 27),
            "voltage": "5V",
            "current": 120
        }
        air_quality_config['gpio_config'] = config.gpio_config
        
        fan_config = {
            "count": config.gpio_config.hardware_config.get("fan", {}).get("count", 4),
            "relay_pin": config.gpio_config.pin_assignments.get("FAN_RELAY_PIN", 25),
            "voltage": config.gpio_config.hardware_config.get("fan", {}).get("voltage", "5V"),
            "current_per_fan": config.gpio_config.hardware_config.get("fan", {}).get("current_per_fan", "200mA"),
            "total_current": config.gpio_config.hardware_config.get("fan", {}).get("total_current", "800mA")
        }
        fan_config['gpio_config'] = config.gpio_config
        
        # Contr√¥leur de temp√©rature
        try:
            controllers['temperature'] = TemperatureController(gpio_manager, temp_config)
            if not controllers['temperature'].check_status():
                raise create_exception(
                    ErrorCode.CONTROLLER_INIT_FAILED,
                    "√âchec d'initialisation du contr√¥leur de temp√©rature",
                    {"controller": "temperature"}
                )
            logger.info("‚úÖ Contr√¥leur de temp√©rature initialis√©")
        except Exception as e:
            logger.exception("‚ùå Erreur initialisation contr√¥leur temp√©rature")
            raise create_exception(
                ErrorCode.CONTROLLER_INIT_FAILED,
                f"Erreur contr√¥leur temp√©rature: {str(e)}",
                {"controller": "temperature", "original_error": str(e)}
            )
        
        # Contr√¥leur d'humidit√©
        try:
            controllers['humidity'] = HumidityController(gpio_manager, humidity_config)
            if not controllers['humidity'].check_status():
                raise create_exception(
                    ErrorCode.CONTROLLER_INIT_FAILED,
                    "√âchec d'initialisation du contr√¥leur d'humidit√©",
                    {"controller": "humidity"}
                )
            logger.info("‚úÖ Contr√¥leur d'humidit√© initialis√©")
        except Exception as e:
            logger.exception("‚ùå Erreur initialisation contr√¥leur humidit√©")
            raise create_exception(
                ErrorCode.CONTROLLER_INIT_FAILED,
                f"Erreur contr√¥leur humidit√©: {str(e)}",
                {"controller": "humidity", "original_error": str(e)}
            )
        
        # Contr√¥leur d'√©clairage
        try:
            controllers['light'] = LightController(gpio_manager, light_config)
            if not controllers['light'].check_status():
                raise create_exception(
                    ErrorCode.CONTROLLER_INIT_FAILED,
                    "√âchec d'initialisation du contr√¥leur d'√©clairage",
                    {"controller": "light"}
                )
            logger.info("‚úÖ Contr√¥leur d'√©clairage initialis√©")
        except Exception as e:
            logger.exception("‚ùå Erreur initialisation contr√¥leur √©clairage")
            raise create_exception(
                ErrorCode.CONTROLLER_INIT_FAILED,
                f"Erreur contr√¥leur √©clairage: {str(e)}",
                {"controller": "light", "original_error": str(e)}
            )
        
        # Contr√¥leur d'alimentation
        try:
            controllers['feeding'] = FeedingController(gpio_manager, feeding_config)
            if not controllers['feeding'].check_status():
                raise create_exception(
                    ErrorCode.CONTROLLER_INIT_FAILED,
                    "√âchec d'initialisation du contr√¥leur d'alimentation",
                    {"controller": "feeding"}
                )
            logger.info("‚úÖ Contr√¥leur d'alimentation initialis√©")
        except Exception as e:
            logger.exception("‚ùå Erreur initialisation contr√¥leur alimentation")
            raise create_exception(
                ErrorCode.CONTROLLER_INIT_FAILED,
                f"Erreur contr√¥leur alimentation: {str(e)}",
                {"controller": "feeding", "original_error": str(e)}
            )
        
        # Contr√¥leur de qualit√© de l'air
        try:
            controllers['air_quality'] = AirQualityController(gpio_manager, air_quality_config)
            if not controllers['air_quality'].check_status():
                raise create_exception(
                    ErrorCode.CONTROLLER_INIT_FAILED,
                    "√âchec d'initialisation du contr√¥leur de qualit√© de l'air",
                    {"controller": "air_quality"}
                )
            logger.info("‚úÖ Contr√¥leur de qualit√© de l'air initialis√©")
        except Exception as e:
            logger.exception("‚ùå Erreur initialisation contr√¥leur qualit√© de l'air")
            raise create_exception(
                ErrorCode.CONTROLLER_INIT_FAILED,
                f"Erreur contr√¥leur qualit√© de l'air: {str(e)}",
                {"controller": "air_quality", "original_error": str(e)}
            )
        
        # Contr√¥leur de ventilateurs
        try:
            controllers['fan'] = FanController(gpio_manager, fan_config)
            if not controllers['fan'].check_status():
                raise create_exception(
                    ErrorCode.CONTROLLER_INIT_FAILED,
                    "√âchec d'initialisation du contr√¥leur de ventilateurs",
                    {"controller": "fan"}
                )
            logger.info("‚úÖ Contr√¥leur de ventilateurs initialis√©")
        except Exception as e:
            logger.exception("‚ùå Erreur initialisation contr√¥leur ventilateurs")
            raise create_exception(
                ErrorCode.CONTROLLER_INIT_FAILED,
                f"Erreur contr√¥leur ventilateurs: {str(e)}",
                {"controller": "fan", "original_error": str(e)}
            )
        
        logger.info("üéâ Tous les contr√¥leurs initialis√©s avec succ√®s")
        return controllers
        
    except AlimanteException:
        # Re-raise les exceptions Alimante
        raise
    except Exception as e:
        logger.exception("üí• Erreur inattendue lors de l'initialisation")
        raise create_exception(
            ErrorCode.SYSTEM_INIT_FAILED,
            f"Erreur d'initialisation inattendue: {str(e)}",
            {"original_error": str(e)}
        )

async def run_system_loop(controllers: Dict[str, Any]):
    """Boucle principale du syst√®me avec gestion d'erreurs robuste"""
    logger.info("üîÑ D√©marrage de la boucle principale du syst√®me")
    
    cycle_count = 0
    
    try:
        while True:
            cycle_count += 1
            logger.debug(f"üîÑ Cycle syst√®me #{cycle_count}")
            
            # Contr√¥le de la temp√©rature
            if 'temperature' in controllers:
                try:
                    success = controllers['temperature'].control()
                    log_controller_action("temperature", "control", success)
                except Exception as e:
                    logger.error(f"‚ùå Erreur contr√¥le temp√©rature: {e}")
                    log_controller_action("temperature", "control", False, {"error": str(e)})
            
            # Contr√¥le de l'humidit√©
            if 'humidity' in controllers:
                try:
                    success = controllers['humidity'].control()
                    log_controller_action("humidity", "control", success)
                except Exception as e:
                    logger.error(f"‚ùå Erreur contr√¥le humidit√©: {e}")
                    log_controller_action("humidity", "control", False, {"error": str(e)})
            
            # Contr√¥le de l'√©clairage
            if 'light' in controllers:
                try:
                    success = controllers['light'].control()
                    log_controller_action("light", "control", success)
                except Exception as e:
                    logger.error(f"‚ùå Erreur contr√¥le √©clairage: {e}")
                    log_controller_action("light", "control", False, {"error": str(e)})
            
            # Contr√¥le de l'alimentation
            if 'feeding' in controllers:
                try:
                    success = controllers['feeding'].control()
                    log_controller_action("feeding", "control", success)
                except Exception as e:
                    logger.error(f"‚ùå Erreur contr√¥le alimentation: {e}")
                    log_controller_action("feeding", "control", False, {"error": str(e)})
            
            # Contr√¥le de la qualit√© de l'air et ventilation
            if 'air_quality' in controllers and 'fan' in controllers:
                try:
                    # Lire la qualit√© de l'air et ajuster automatiquement les ventilateurs
                    success = controllers['air_quality'].control_ventilation(controllers['fan'])
                    log_controller_action("air_quality", "control_ventilation", success)
                    
                    if success:
                        # Obtenir le statut pour le logging
                        air_status = controllers['air_quality'].get_status()
                        fan_status = controllers['fan'].get_status()
                        logger.debug(f"Qualit√© air: {air_status.get('current_quality', 'unknown')} - Ventilateurs: {fan_status.get('current_speed', 0)}%")
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur contr√¥le qualit√© air/ventilation: {e}")
                    log_controller_action("air_quality", "control_ventilation", False, {"error": str(e)})
            
            # Contr√¥le autonome des ventilateurs (temp√©rature et humidit√©)
            elif 'fan' in controllers:
                try:
                    # Obtenir les valeurs actuelles depuis les autres contr√¥leurs
                    temp_value = None
                    humidity_value = None
                    
                    if 'temperature' in controllers:
                        temp_status = controllers['temperature'].get_status()
                        temp_value = temp_status.get('current_temperature', None)
                    
                    if 'humidity' in controllers:
                        humidity_status = controllers['humidity'].get_status()
                        humidity_value = humidity_status.get('current_humidity', None)
                    
                    # Contr√¥le automatique des ventilateurs bas√© sur temp√©rature/humidit√©
                    if temp_value is not None or humidity_value is not None:
                        success = controllers['fan'].control_ventilation(
                            temperature=temp_value or 25.0,
                            humidity=humidity_value or 60.0
                        )
                        log_controller_action("fan", "control_ventilation", success)
                        
                        if success:
                            fan_status = controllers['fan'].get_status()
                            logger.debug(f"Ventilateurs: {fan_status.get('fans_active', False)} - Vitesse: {fan_status.get('current_speed', 0)}%")
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur contr√¥le ventilateurs: {e}")
                    log_controller_action("fan", "control_ventilation", False, {"error": str(e)})
            
            # Pause entre les cycles
            await asyncio.sleep(30)  # Contr√¥le toutes les 30 secondes
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.exception("üí• Erreur critique dans la boucle principale")
        raise create_exception(
            ErrorCode.SYSTEM_INIT_FAILED,
            f"Erreur dans la boucle principale: {str(e)}",
            {"cycle_count": cycle_count, "original_error": str(e)}
        )
    finally:
        # Nettoyage
        logger.info("üßπ Nettoyage des ressources")
        try:
            # Nettoyer les contr√¥leurs
            for controller_name, controller in controllers.items():
                try:
                    if hasattr(controller, 'cleanup'):
                        controller.cleanup()
                        logger.debug(f"‚úÖ Contr√¥leur {controller_name} nettoy√©")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur lors du nettoyage du contr√¥leur {controller_name}: {e}")
            
            # Nettoyer GPIO
            if 'gpio_manager' in globals():
                gpio_manager.cleanup()
                logger.info("‚úÖ GPIO nettoy√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du nettoyage: {e}")

def main():
    """Point d'entr√©e principal avec gestion d'erreurs compl√®te"""
    try:
        # Initialisation du logging
        logger = get_logger()
        log_system_start()
        
        logger.info("üöÄ D√©marrage du syst√®me Alimante")
        
        # S√©lection de la configuration
        specific_config_path = select_config()
        if not specific_config_path:
            raise create_exception(
                ErrorCode.CONFIGURATION_INVALID,
                "Configuration non s√©lectionn√©e"
            )
        
        logger.info(f"üìã Configuration s√©lectionn√©e: {specific_config_path}")
        
        # Chargement de la configuration
        common_config_path = 'config/config.json'
        gpio_config_path = 'config/gpio_config.json'
        config = SystemConfig.from_json(common_config_path, specific_config_path, gpio_config_path)
        
        logger.info("‚úÖ Configuration charg√©e avec succ√®s")
        
        # Initialisation du syst√®me
        controllers = initialize_system(config)
        
        if not controllers:
            raise create_exception(
                ErrorCode.SYSTEM_INIT_FAILED,
                "Aucun contr√¥leur initialis√©"
            )
            
        logger.info(f"‚úÖ Syst√®me initialis√© avec {len(controllers)} contr√¥leurs")
        
        # D√©marrage de la boucle principale
        asyncio.run(run_system_loop(controllers))
        
    except AlimanteException as e:
        logger.critical(f"üí• Erreur syst√®me: {e.message}", {
            "error_code": e.error_code.value,
            "error_name": e.error_code.name,
            "context": e.context
        })
        sys.exit(1)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        logger.critical(f"üí• Erreur inattendue: {str(e)}")
        sys.exit(1)
    finally:
        log_system_stop()
        logger.info("üõë Arr√™t du syst√®me Alimante")

if __name__ == "__main__":
    main()
