#!/usr/bin/env python3
"""
Diagnostic complet de l'application Alimante
Identifie toutes les incoh√©rences et probl√®mes potentiels
"""

import os
import sys
import json
import importlib
import inspect
from typing import Dict, List, Any, Set
from pathlib import Path

class DiagnosticComplet:
    """Classe pour effectuer un diagnostic complet de l'application"""
    
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.info = []
        self.project_root = Path(__file__).parent
        
    def run_diagnostic(self):
        """Ex√©cute le diagnostic complet"""
        print("üîç DIAGNOSTIC COMPLET DE L'APPLICATION ALIMANTE")
        print("=" * 60)
        
        self.check_project_structure()
        self.check_imports_and_dependencies()
        self.check_configuration_files()
        self.check_controller_consistency()
        self.check_api_consistency()
        self.check_gpio_configuration()
        self.check_method_signatures()
        self.check_error_handling()
        self.check_logging_consistency()
        
        self.print_report()
        
    def check_project_structure(self):
        """V√©rifie la structure du projet"""
        print("\nüìÅ V√©rification de la structure du projet...")
        
        required_dirs = [
            "src", "config", "tests", "docs", "logs"
        ]
        
        for dir_name in required_dirs:
            dir_path = self.project_root / dir_name
            if not dir_path.exists():
                self.errors.append(f"R√©pertoire requis manquant: {dir_name}")
            else:
                self.info.append(f"‚úÖ R√©pertoire {dir_name} trouv√©")
                
        # V√©rifier les fichiers requis
        required_files = [
            "main.py", "requirements.txt", "setup.py", "Readme.md"
        ]
        
        for file_name in required_files:
            file_path = self.project_root / file_name
            if not file_path.exists():
                self.errors.append(f"Fichier requis manquant: {file_name}")
            else:
                self.info.append(f"‚úÖ Fichier {file_name} trouv√©")
    
    def check_imports_and_dependencies(self):
        """V√©rifie les imports et d√©pendances"""
        print("\nüì¶ V√©rification des imports et d√©pendances...")
        
        # V√©rifier requirements.txt
        req_file = self.project_root / "requirements.txt"
        if req_file.exists():
            with open(req_file, 'r') as f:
                requirements = f.read()
                
            # V√©rifier les d√©pendances critiques
            critical_deps = ["RPi.GPIO", "Flask", "FastAPI"]
            for dep in critical_deps:
                if dep in requirements:
                    self.info.append(f"‚úÖ D√©pendance critique trouv√©e: {dep}")
                else:
                    self.warnings.append(f"‚ö†Ô∏è D√©pendance critique manquante: {dep}")
        
        # V√©rifier les imports dans main.py
        main_file = self.project_root / "main.py"
        if main_file.exists():
            with open(main_file, 'r') as f:
                content = f.read()
                
            # V√©rifier les imports critiques
            critical_imports = [
                "src.utils.config_manager",
                "src.utils.gpio_manager",
                "src.controllers.temperature_controller"
            ]
            
            for imp in critical_imports:
                if imp in content:
                    self.info.append(f"‚úÖ Import critique trouv√©: {imp}")
                else:
                    self.warnings.append(f"‚ö†Ô∏è Import critique manquant: {imp}")
    
    def check_configuration_files(self):
        """V√©rifie les fichiers de configuration"""
        print("\n‚öôÔ∏è V√©rification des fichiers de configuration...")
        
        config_dir = self.project_root / "config"
        if not config_dir.exists():
            self.errors.append("R√©pertoire de configuration manquant")
            return
            
        # V√©rifier config.json principal
        main_config = config_dir / "config.json"
        if main_config.exists():
            try:
                with open(main_config, 'r') as f:
                    config_data = json.load(f)
                    
                # V√©rifier les sections requises
                required_sections = [
                    "system_info", "hardware", "communication", 
                    "location", "species_profiles", "system_control",
                    "safety", "api", "logging", "performance"
                ]
                
                for section in required_sections:
                    if section in config_data:
                        self.info.append(f"‚úÖ Section de configuration: {section}")
                    else:
                        self.warnings.append(f"‚ö†Ô∏è Section de configuration manquante: {section}")
                        
            except json.JSONDecodeError as e:
                self.errors.append(f"Erreur JSON dans config.json: {e}")
        else:
            self.errors.append("Fichier de configuration principal manquant")
            
        # V√©rifier gpio_config.json
        gpio_config = config_dir / "gpio_config.json"
        if gpio_config.exists():
            try:
                with open(gpio_config, 'r') as f:
                    gpio_data = json.load(f)
                    
                # V√©rifier les sections GPIO requises
                gpio_sections = ["gpio_pins", "pin_assignments", "hardware_config"]
                for section in gpio_sections:
                    if section in gpio_data:
                        self.info.append(f"‚úÖ Section GPIO: {section}")
                    else:
                        self.warnings.append(f"‚ö†Ô∏è Section GPIO manquante: {section}")
                        
            except json.JSONDecodeError as e:
                self.errors.append(f"Erreur JSON dans gpio_config.json: {e}")
        else:
            self.warnings.append("Configuration GPIO manquante")
            
        # V√©rifier les configurations d'esp√®ces
        species_dir = config_dir / "orthopteres" / "mantidae"
        if species_dir.exists():
            species_files = list(species_dir.glob("*.json"))
            if species_files:
                self.info.append(f"‚úÖ {len(species_files)} configuration(s) d'esp√®ce trouv√©e(s)")
                
                # V√©rifier mantis_religiosa.json
                mantis_config = species_dir / "mantis_religiosa.json"
                if mantis_config.exists():
                    try:
                        with open(mantis_config, 'r') as f:
                            mantis_data = json.load(f)
                            
                        # V√©rifier les sections requises
                        required_species_sections = [
                            "temperature", "humidity", "feeding", "lighting"
                        ]
                        
                        for section in required_species_sections:
                            if section in mantis_data:
                                self.info.append(f"‚úÖ Configuration esp√®ce: {section}")
                            else:
                                self.warnings.append(f"‚ö†Ô∏è Configuration esp√®ce manquante: {section}")
                                
                    except json.JSONDecodeError as e:
                        self.errors.append(f"Erreur JSON dans mantis_religiosa.json: {e}")
                else:
                    self.warnings.append("Configuration mantis_religiosa manquante")
            else:
                self.warnings.append("Aucune configuration d'esp√®ce trouv√©e")
        else:
            self.warnings.append("R√©pertoire des esp√®ces manquant")
    
    def check_controller_consistency(self):
        """V√©rifie la coh√©rence des contr√¥leurs"""
        print("\nüéÆ V√©rification de la coh√©rence des contr√¥leurs...")
        
        controllers_dir = self.project_root / "src" / "controllers"
        if not controllers_dir.exists():
            self.errors.append("R√©pertoire des contr√¥leurs manquant")
            return
            
        # V√©rifier les contr√¥leurs requis
        required_controllers = [
            "temperature_controller.py",
            "humidity_controller.py", 
            "light_controller.py",
            "feeding_controller.py",
            "base_controller.py"
        ]
        
        for controller in required_controllers:
            controller_path = controllers_dir / controller
            if controller_path.exists():
                self.info.append(f"‚úÖ Contr√¥leur trouv√©: {controller}")
                
                # V√©rifier la coh√©rence des m√©thodes
                if controller != "base_controller.py":
                    self.check_controller_methods(controller_path)
            else:
                self.errors.append(f"Contr√¥leur requis manquant: {controller}")
    
    def check_controller_methods(self, controller_path: Path):
        """V√©rifie la coh√©rence des m√©thodes d'un contr√¥leur"""
        try:
            with open(controller_path, 'r') as f:
                content = f.read()
                
            # V√©rifier les m√©thodes requises
            required_methods = [
                "check_status", "get_status", "control"
            ]
            
            for method in required_methods:
                if f"def {method}" in content:
                    self.info.append(f"  ‚úÖ M√©thode {method} trouv√©e")
                else:
                    self.warnings.append(f"  ‚ö†Ô∏è M√©thode {method} manquante dans {controller_path.name}")
                    
            # V√©rifier l'h√©ritage de BaseController
            if "BaseController" in content:
                self.info.append(f"  ‚úÖ H√©rite de BaseController")
            else:
                self.warnings.append(f"  ‚ö†Ô∏è N'h√©rite pas de BaseController")
                
        except Exception as e:
            self.errors.append(f"Erreur lors de la v√©rification de {controller_path.name}: {e}")
    
    def check_api_consistency(self):
        """V√©rifie la coh√©rence de l'API"""
        print("\nüåê V√©rification de la coh√©rence de l'API...")
        
        api_dir = self.project_root / "src" / "api"
        if not api_dir.exists():
            self.warnings.append("R√©pertoire API manquant")
            return
            
        # V√©rifier app.py
        app_file = api_dir / "app.py"
        if app_file.exists():
            try:
                with open(app_file, 'r') as f:
                    content = f.read()
                    
                # V√©rifier les imports des contr√¥leurs
                controller_imports = [
                    "TemperatureController", "HumidityController", 
                    "LightController", "FeedingController"
                ]
                
                for controller in controller_imports:
                    if controller in content:
                        self.info.append(f"‚úÖ Import contr√¥leur API: {controller}")
                    else:
                        self.warnings.append(f"‚ö†Ô∏è Import contr√¥leur API manquant: {controller}")
                        
                # V√©rifier les endpoints
                required_endpoints = [
                    "/api/status", "/api/control", "/api/health"
                ]
                
                for endpoint in required_endpoints:
                    if endpoint in content:
                        self.info.append(f"‚úÖ Endpoint trouv√©: {endpoint}")
                    else:
                        self.warnings.append(f"‚ö†Ô∏è Endpoint manquant: {endpoint}")
                        
            except Exception as e:
                self.errors.append(f"Erreur lors de la v√©rification de l'API: {e}")
        else:
            self.warnings.append("Fichier API principal manquant")
    
    def check_gpio_configuration(self):
        """V√©rifie la configuration GPIO"""
        print("\nüîå V√©rification de la configuration GPIO...")
        
        gpio_config = self.project_root / "config" / "gpio_config.json"
        if not gpio_config.exists():
            self.warnings.append("Configuration GPIO manquante")
            return
            
        try:
            with open(gpio_config, 'r') as f:
                gpio_data = json.load(f)
                
            # V√©rifier les pins critiques
            critical_pins = [
                "TEMP_HUMIDITY_PIN", "HEATING_RELAY_PIN", 
                "HUMIDITY_RELAY_PIN", "LIGHT_RELAY_PIN"
            ]
            
            pin_assignments = gpio_data.get("pin_assignments", {})
            for pin in critical_pins:
                if pin in pin_assignments:
                    self.info.append(f"‚úÖ Pin GPIO configur√©: {pin}")
                else:
                    self.warnings.append(f"‚ö†Ô∏è Pin GPIO manquant: {pin}")
                    
            # V√©rifier la coh√©rence des pins
            used_pins = set()
            for pin_name, pin_number in pin_assignments.items():
                if pin_number in used_pins:
                    self.errors.append(f"Pin {pin_number} utilis√© plusieurs fois: {pin_name}")
                used_pins.add(pin_number)
                
        except Exception as e:
            self.errors.append(f"Erreur lors de la v√©rification GPIO: {e}")
    
    def check_method_signatures(self):
        """V√©rifie la coh√©rence des signatures de m√©thodes"""
        print("\nüìù V√©rification des signatures de m√©thodes...")
        
        # V√©rifier les m√©thodes critiques dans les contr√¥leurs
        critical_methods = {
            "control_temperature": "bool",
            "control_humidity": "bool", 
            "control_lighting": "bool",
            "control_feeding": "bool"
        }
        
        controllers_dir = self.project_root / "src" / "controllers"
        if controllers_dir.exists():
            for controller_file in controllers_dir.glob("*.py"):
                if controller_file.name == "base_controller.py":
                    continue
                    
                try:
                    with open(controller_file, 'r') as f:
                        content = f.read()
                        
                    for method_name, return_type in critical_methods.items():
                        if method_name in content:
                            # V√©rifier le type de retour
                            if f"-> {return_type}" in content:
                                self.info.append(f"‚úÖ Signature correcte: {controller_file.name}.{method_name}")
                            else:
                                self.warnings.append(f"‚ö†Ô∏è Type de retour incorrect: {controller_file.name}.{method_name}")
                                
                except Exception as e:
                    self.errors.append(f"Erreur lors de la v√©rification de {controller_file.name}: {e}")
    
    def check_error_handling(self):
        """V√©rifie la gestion d'erreurs"""
        print("\nüö® V√©rification de la gestion d'erreurs...")
        
        # V√©rifier les exceptions personnalis√©es
        exceptions_file = self.project_root / "src" / "utils" / "exceptions.py"
        if exceptions_file.exists():
            try:
                with open(exceptions_file, 'r') as f:
                    content = f.read()
                    
                # V√©rifier les classes d'exception
                exception_classes = [
                    "AlimanteException", "SystemException", "GPIOException", "ControllerException"
                ]
                
                for exc_class in exception_classes:
                    if exc_class in content:
                        self.info.append(f"‚úÖ Classe d'exception trouv√©e: {exc_class}")
                    else:
                        self.warnings.append(f"‚ö†Ô∏è Classe d'exception manquante: {exc_class}")
                        
            except Exception as e:
                self.errors.append(f"Erreur lors de la v√©rification des exceptions: {e}")
        else:
            self.warnings.append("Fichier d'exceptions manquant")
            
        # V√©rifier la gestion d'erreurs dans main.py
        main_file = self.project_root / "main.py"
        if main_file.exists():
            try:
                with open(main_file, 'r') as f:
                    content = f.read()
                    
                # V√©rifier les blocs try-catch
                if "try:" in content and "except" in content:
                    self.info.append("‚úÖ Gestion d'erreurs trouv√©e dans main.py")
                else:
                    self.warnings.append("‚ö†Ô∏è Gestion d'erreurs manquante dans main.py")
                    
            except Exception as e:
                self.errors.append(f"Erreur lors de la v√©rification de main.py: {e}")
    
    def check_logging_consistency(self):
        """V√©rifie la coh√©rence du syst√®me de logging"""
        print("\nüìä V√©rification de la coh√©rence du logging...")
        
        # V√©rifier le fichier de configuration de logging
        logging_config = self.project_root / "src" / "utils" / "logging_config.py"
        if logging_config.exists():
            try:
                with open(logging_config, 'r') as f:
                    content = f.read()
                    
                # V√©rifier les fonctions de logging
                logging_functions = [
                    "get_logger", "log_system_start", "log_system_stop", "log_controller_action"
                ]
                
                for func in logging_functions:
                    if f"def {func}" in content:
                        self.info.append(f"‚úÖ Fonction de logging trouv√©e: {func}")
                    else:
                        self.warnings.append(f"‚ö†Ô∏è Fonction de logging manquante: {func}")
                        
            except Exception as e:
                self.errors.append(f"Erreur lors de la v√©rification du logging: {e}")
        else:
            self.warnings.append("Configuration de logging manquante")
            
        # V√©rifier la configuration YAML de logging
        logging_yaml = self.project_root / "config" / "logging.yaml"
        if logging_yaml.exists():
            self.info.append("‚úÖ Configuration YAML de logging trouv√©e")
        else:
            self.warnings.append("‚ö†Ô∏è Configuration YAML de logging manquante")
    
    def print_report(self):
        """Affiche le rapport de diagnostic"""
        print("\n" + "=" * 60)
        print("üìã RAPPORT DE DIAGNOSTIC")
        print("=" * 60)
        
        if self.errors:
            print(f"\n‚ùå ERREURS CRITIQUES ({len(self.errors)}):")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
                
        if self.warnings:
            print(f"\n‚ö†Ô∏è AVERTISSEMENTS ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"  ‚Ä¢ {warning}")
                
        if self.info:
            print(f"\n‚úÖ INFORMATIONS ({len(self.info)}):")
            for info in self.info:
                print(f"  ‚Ä¢ {info}")
                
        # R√©sum√©
        print(f"\nüìä R√âSUM√â:")
        print(f"  ‚Ä¢ Erreurs critiques: {len(self.errors)}")
        print(f"  ‚Ä¢ Avertissements: {len(self.warnings)}")
        print(f"  ‚Ä¢ Informations: {len(self.info)}")
        
        if self.errors:
            print(f"\nüö® L'application pr√©sente {len(self.errors)} erreur(s) critique(s) √† corriger!")
        elif self.warnings:
            print(f"\n‚ö†Ô∏è L'application pr√©sente {len(self.warnings)} avertissement(s) √† examiner.")
        else:
            print(f"\nüéâ Aucun probl√®me critique d√©tect√©! L'application semble coh√©rente.")
            
        # Recommandations
        if self.errors:
            print(f"\nüîß RECOMMANDATIONS:")
            print(f"  ‚Ä¢ Corriger toutes les erreurs critiques avant de d√©ployer")
            print(f"  ‚Ä¢ Tester l'application apr√®s chaque correction")
            
        if self.warnings:
            print(f"\nüìù POINTS √Ä V√âRIFIER:")
            print(f"  ‚Ä¢ Examiner les avertissements pour am√©liorer la robustesse")
            print(f"  ‚Ä¢ V√©rifier la coh√©rence des configurations")

if __name__ == "__main__":
    diagnostic = DiagnosticComplet()
    diagnostic.run_diagnostic()
