"""
app.py
API FastAPI pour le syst√®me de gestion des mantes
"""

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException, Request, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import StreamingResponse
import asyncio
import io
import json
import logging
from typing import Dict, Any, List
from datetime import datetime

from src.utils.config_manager import SystemConfig
from src.utils.gpio_manager import GPIOManager
from src.utils.logging_config import get_logger, log_system_start, log_system_stop
from src.utils.error_handler import register_error_handlers, create_api_error
from src.utils.exceptions import ErrorCode, AlimanteException
from src.utils.auth import (
    auth_manager,
    get_current_user,
    require_admin,
    User,
    UserLogin, 
    Token, 
    UserResponse,
    create_user_token,
    log_auth_event
)
from src.api.models import (
    ControlRequest,
    FeedingTriggerRequest,
    ConfigUpdateRequest,
    SystemStatusResponse,
    SystemMetrics,
    ControlResponse,
    FeedingResponse,
    ConfigResponse,
    WebSocketMessage,
    StatusUpdateMessage,
    ControlUpdateMessage,
    FeedingUpdateMessage,
    ControllerInfo
)
# Import des contr√¥leurs
from src.controllers.temperature_controller import TemperatureController
from src.controllers.light_controller import LightController
from src.controllers.humidity_controller import HumidityController
from src.controllers.feeding_controller import FeedingController
from src.controllers.fan_controller import FanController
from src.controllers.ultrasonic_mist_controller import UltrasonicMistController
from src.controllers.air_quality_controller import AirQualityController
from src.controllers.lcd_menu_controller import LCDMenuController
from src.controllers.camera_controller import CameraController
from src.controllers.water_level_controller import WaterLevelController
from src.controllers.radiator_temp_controller import RadiatorTempController

# Import des services
from src.services.system_service import system_service
from src.services.control_service import control_service
from src.services.config_service import config_service
from src.services.sensor_service import sensor_service

# Configuration de l'application
app = FastAPI(
    title="Alimante API",
    description="API s√©curis√©e pour la gestion automatis√©e des mantes",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Enregistrement des gestionnaires d'erreurs
register_error_handlers(app)

# CORS pour l'application mobile (s√©curis√©)
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",  # D√©veloppement local
        "http://192.168.1.100:3000",  # IP locale
        "https://votre-app-mobile.com"  # Production (√† remplacer)
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Variables globales
gpio_manager: GPIOManager = None
controllers: Dict[str, Any] = {}
websocket_connections: List[WebSocket] = []
logger = get_logger("api")

@app.on_event("startup")
async def startup_event():
    """Initialise le syst√®me au d√©marrage"""
    global gpio_manager, controllers
    
    try:
        logger.info("üöÄ D√©marrage de l'API Alimante")
        
        # Initialisation GPIO
        gpio_manager = GPIOManager()
        if not gpio_manager.initialized:
            raise create_api_error(
                ErrorCode.GPIO_INIT_FAILED,
                "Impossible d'initialiser le GPIO",
                {"gpio_status": "failed"}
            )
        
        # Chargement de la configuration via le service
        config = config_service.load_system_config()
        
        # Initialisation des contr√¥leurs
        controllers = {
            'temperature': TemperatureController(gpio_manager, config.temperature),
            'humidity': HumidityController(gpio_manager, config.humidity),
            'light': LightController(gpio_manager, config.location),
            'feeding': FeedingController(gpio_manager, config.feeding),
            'fan': FanController(gpio_manager, config.get("fan", {})),
            'ultrasonic_mist': UltrasonicMistController(gpio_manager, config.get("ultrasonic_mist", {})),
            'air_quality': AirQualityController(gpio_manager, config.get("air_quality", {})),
            'lcd_menu': LCDMenuController(gpio_manager, config.get("lcd_config", {})),
            'camera': CameraController(config.get("camera_config", {})),
            'water_level': WaterLevelController(gpio_manager, config.get("water_level_sensor", {})),
            'radiator_temp': RadiatorTempController(gpio_manager, config.get("radiator_temp_sensor", {}))
        }
        
        # Enregistrer les contr√¥leurs dans les services
        for name, controller in controllers.items():
            system_service.register_controller(name, controller)
            control_service.register_controller(name, controller)
        
        # Enregistrer les capteurs dans le service de capteurs
        sensor_service.register_sensor("temperature", "temperature", controllers['temperature'])
        sensor_service.register_sensor("humidity", "humidity", controllers['humidity'])
        sensor_service.register_sensor("light", "light", controllers['light'])
        sensor_service.register_sensor("air_quality", "air_quality", controllers['air_quality'])
        sensor_service.register_sensor("water_level", "water_level", controllers['water_level'])
        sensor_service.register_sensor("radiator_temp", "radiator_temp", controllers['radiator_temp'])
        
        # Validation des contr√¥leurs
        for name, controller in controllers.items():
            if not controller.check_status():
                raise create_api_error(
                    ErrorCode.CONTROLLER_INIT_FAILED,
                    f"√âchec d'initialisation du contr√¥leur {name}",
                    {"controller": name, "status": "failed"}
                )
        
        log_system_start()
        logger.info("‚úÖ API Alimante d√©marr√©e avec succ√®s")
        
    except AlimanteException:
        # Re-raise les exceptions Alimante
        raise
    except Exception as e:
        logger.exception("üí• Erreur lors du d√©marrage de l'API")
        raise create_api_error(
            ErrorCode.SYSTEM_INIT_FAILED,
            f"Erreur lors du d√©marrage: {str(e)}",
            {"original_error": str(e)}
        )

@app.on_event("shutdown")
async def shutdown_event():
    """Nettoie les ressources √† l'arr√™t"""
    global gpio_manager
    
    logger.info("üõë Arr√™t de l'API Alimante")
    
    # Fermer les connexions WebSocket
    for websocket in websocket_connections:
        try:
            await websocket.close()
        except Exception as e:
            logger.warning(f"Erreur lors de la fermeture WebSocket: {e}")
    
    # Nettoyer les services
    system_service.cleanup()
    control_service.cleanup()
    config_service.cleanup()
    sensor_service.cleanup()
    
    # Nettoyer GPIO
    if gpio_manager:
        try:
            gpio_manager.cleanup()
            logger.info("‚úÖ GPIO nettoy√©")
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage GPIO: {e}")
    
    log_system_stop()

async def broadcast_to_websockets(message: WebSocketMessage):
    """Envoie un message √† tous les clients WebSocket connect√©s"""
    if not websocket_connections:
        return
        
    message_json = message.json()
    disconnected = []
    
    for websocket in websocket_connections:
        try:
            await websocket.send_text(message_json)
        except Exception as e:
            logger.warning(f"Erreur WebSocket: {e}")
            disconnected.append(websocket)
    
    # Nettoyer les connexions d√©connect√©es
    for websocket in disconnected:
        websocket_connections.remove(websocket)
    
    if disconnected:
        logger.info(f"üßπ {len(disconnected)} connexions WebSocket nettoy√©es")

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """Endpoint WebSocket pour les mises √† jour en temps r√©el"""
    await websocket.accept()
    websocket_connections.append(websocket)
    
    logger.info("üîå Nouvelle connexion WebSocket", {
        "total_connections": len(websocket_connections)
    })
    
    try:
        while True:
            # Envoi p√©riodique des donn√©es
            status_data = await get_system_status()
            status_message = StatusUpdateMessage(
                data=status_data
            )
            await websocket.send_text(status_message.json())
            await asyncio.sleep(5)  # Mise √† jour toutes les 5 secondes
            
    except WebSocketDisconnect:
        websocket_connections.remove(websocket)
        logger.info("üîå Client WebSocket d√©connect√©", {
            "remaining_connections": len(websocket_connections)
        })
    except Exception as e:
        logger.exception("üí• Erreur WebSocket")
        if websocket in websocket_connections:
            websocket_connections.remove(websocket)

# Endpoints d'authentification
@app.post("/api/auth/login", response_model=Token)
async def login(user_credentials: UserLogin):
    """Authentification utilisateur"""
    try:
        user = auth_manager.authenticate_user(user_credentials.username, user_credentials.password)
        if not user:
            log_auth_event("login_failed", user_credentials.username, False)
            raise create_api_error(
                ErrorCode.API_UNAUTHORIZED,
                "Nom d'utilisateur ou mot de passe incorrect"
            )
        
        token = create_user_token(user)
        log_auth_event("login_success", user.username, True)
        
        return token
        
    except AlimanteException:
        raise
    except Exception as e:
        logger.exception("üí• Erreur lors de l'authentification")
        raise create_api_error(
            ErrorCode.API_UNAUTHORIZED,
            "Erreur lors de l'authentification",
            {"original_error": str(e)}
        )

@app.get("/api/auth/me", response_model=UserResponse)
async def get_current_user_info(current_user: User = Depends(get_current_user)):
    """R√©cup√®re les informations de l'utilisateur connect√©"""
    return UserResponse(
        username=current_user.username,
        email=current_user.email,
        is_admin=current_user.is_admin,
        is_active=current_user.is_active
    )

# Endpoints publics (sans authentification)
@app.get("/")
async def root():
    """Endpoint racine"""
    return {
        "message": "Alimante API",
        "version": "1.0.0",
        "status": "running",
        "timestamp": datetime.now().isoformat(),
        "docs": "/docs"
    }

@app.get("/api/health")
async def health_check():
    """V√©rification de sant√© du syst√®me"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

# Endpoints prot√©g√©s (avec authentification)
@app.get("/api/status", response_model=SystemStatusResponse)
async def get_system_status(current_user: User = Depends(get_current_user)):
    """Retourne le statut complet du syst√®me"""
    try:
        # Utiliser le service syst√®me
        status_data = system_service.get_system_status()
        
        # Convertir en format de r√©ponse API
        status = SystemStatusResponse(
            status="online",
            controllers={}
        )
        
        # Convertir les contr√¥leurs
        for name, controller_data in status_data["controllers"].items():
            status.controllers[name] = ControllerInfo(
                name=name,
                status=controller_data["status"],
                last_update=datetime.fromisoformat(controller_data["last_update"]),
                error_count=controller_data.get("error_count", 0),
                metadata=controller_data.get("metadata")
            )
        
        return status
        
    except Exception as e:
        logger.exception("üí• Erreur lors de la r√©cup√©ration du statut")
        raise create_api_error(
            ErrorCode.SERVICE_UNAVAILABLE,
            "Impossible de r√©cup√©rer le statut du syst√®me",
            {"original_error": str(e)}
        )

@app.get("/api/metrics", response_model=SystemMetrics)
async def get_metrics(current_user: User = Depends(get_current_user)):
    """R√©cup√®re les m√©triques des capteurs"""
    try:
        # Utiliser le service syst√®me pour les m√©triques
        metrics_data = system_service.get_system_metrics()
        
        # Convertir en format de r√©ponse API
        metrics = SystemMetrics(
            temperature={
                'current': metrics_data.temperature,
                'heating_active': metrics_data.heating_active,
                'cooling_active': metrics_data.cooling_active
            } if metrics_data.temperature is not None else None,
            humidity={
                'current': metrics_data.humidity,
                'humidifier_active': metrics_data.humidifier_active
            } if metrics_data.humidity is not None else None,
            lighting={
                'level': metrics_data.light_level,
                'light_on': metrics_data.light_on
            } if metrics_data.light_level is not None else None,
            feeding={
                'last_feeding': metrics_data.feeding_last.isoformat() if metrics_data.feeding_last else None,
                'next_feeding': metrics_data.feeding_next.isoformat() if metrics_data.feeding_next else None
            } if metrics_data.feeding_last or metrics_data.feeding_next else None
        )
        
        return metrics
        
    except Exception as e:
        logger.exception("üí• Erreur lors de la r√©cup√©ration des m√©triques")
        raise create_api_error(
            ErrorCode.SERVICE_UNAVAILABLE,
            "Impossible de r√©cup√©rer les m√©triques",
            {"original_error": str(e)}
        )

@app.post("/api/control", response_model=ControlResponse)
async def control_system(
    control_request: ControlRequest,
    current_user: User = Depends(get_current_user)
):
    """Contr√¥le les syst√®mes"""
    try:
        # Utiliser le service de contr√¥le
        action_names = [action.value for action in control_request.actions]
        result = control_service.execute_multiple_actions(action_names, control_request.parameters)
        
        # Broadcast aux clients WebSocket
        control_message = ControlUpdateMessage(
            data=ControlResponse(
                status=result["status"],
                results=result["results"],
                errors=result.get("errors")
            )
        )
        await broadcast_to_websockets(control_message)
        
        logger.info("üéõÔ∏è Contr√¥le syst√®me ex√©cut√©", {
            "user": current_user.username,
            "actions": action_names,
            "results": result["results"]
        })
        
        return ControlResponse(
            status=result["status"],
            results=result["results"],
            errors=result.get("errors")
        )
        
    except AlimanteException:
        raise
    except Exception as e:
        logger.exception("üí• Erreur lors du contr√¥le syst√®me")
        raise create_api_error(
            ErrorCode.SERVICE_UNAVAILABLE,
            "Erreur lors du contr√¥le syst√®me",
            {"original_error": str(e)}
        )

@app.post("/api/feeding/trigger", response_model=FeedingResponse)
async def trigger_feeding(
    feeding_request: FeedingTriggerRequest,
    current_user: User = Depends(get_current_user)
):
    """D√©clenche manuellement l'alimentation"""
    try:
        # Utiliser le service de contr√¥le
        result = control_service.execute_control_action("feeding", {
            "quantity": feeding_request.quantity,
            "force": feeding_request.force
        })
        
        feeding_message = FeedingUpdateMessage(
            data=FeedingResponse(
                status="success" if result["status"] == "success" else "error",
                success=result["status"] == "success",
                quantity_dispensed=feeding_request.quantity if result["status"] == "success" else None
            )
        )
        await broadcast_to_websockets(feeding_message)
        
        logger.info("üçΩÔ∏è Alimentation d√©clench√©e", {
            "user": current_user.username,
            "success": result["status"] == "success",
            "quantity": feeding_request.quantity
        })
        
        return FeedingResponse(
            status="success" if result["status"] == "success" else "error",
            success=result["status"] == "success",
            quantity_dispensed=feeding_request.quantity if result["status"] == "success" else None
        )
        
    except AlimanteException:
        raise
    except Exception as e:
        logger.exception("üí• Erreur lors du d√©clenchement de l'alimentation")
        raise create_api_error(
            ErrorCode.FEEDING_FAILED,
            "Erreur lors du d√©clenchement de l'alimentation",
            {"original_error": str(e)}
        )

@app.get("/api/config", response_model=ConfigResponse)
async def get_config(current_user: User = Depends(get_current_user)):
    """Retourne la configuration actuelle"""
    try:
        # Utiliser le service de configuration
        config = config_service.load_system_config()
        
        return ConfigResponse(
            temperature=config.temperature,
            humidity=config.humidity,
            feeding=config.feeding,
            lighting={},  # √Ä impl√©menter
            location=config.location
        )
    except Exception as e:
        logger.exception("üí• Erreur lors de la r√©cup√©ration de la configuration")
        raise create_api_error(
            ErrorCode.CONFIGURATION_INVALID,
            "Impossible de r√©cup√©rer la configuration",
            {"original_error": str(e)}
        )

# Endpoints administrateur
@app.put("/api/config", response_model=ConfigResponse)
async def update_config(
    config_update: ConfigUpdateRequest,
    admin_user: User = Depends(require_admin)
):
    """Met √† jour la configuration (admin uniquement)"""
    try:
        # Utiliser le service de configuration
        if config_update.temperature:
            config_service.update_config_section("species", "temperature", config_update.temperature)
        
        if config_update.humidity:
            config_service.update_config_section("species", "humidity", config_update.humidity)
        
        if config_update.feeding:
            config_service.update_config_section("species", "feeding", config_update.feeding)
        
        if config_update.lighting:
            config_service.update_config_section("species", "lighting", config_update.lighting)
        
        logger.info("‚öôÔ∏è Configuration mise √† jour", {
            "user": admin_user.username,
            "updates": config_update.dict(exclude_none=True)
        })
        
        # Retourner la configuration actuelle
        config = config_service.load_system_config()
        return ConfigResponse(
            temperature=config.temperature,
            humidity=config.humidity,
            feeding=config.feeding,
            lighting={},
            location=config.location
        )
        
    except Exception as e:
        logger.exception("üí• Erreur lors de la mise √† jour de la configuration")
        raise create_api_error(
            ErrorCode.CONFIGURATION_INVALID,
            "Erreur lors de la mise √† jour de la configuration",
            {"original_error": str(e)}
        )

# Nouveaux endpoints pour les services
@app.get("/api/system/health")
async def get_system_health(current_user: User = Depends(get_current_user)):
    """R√©cup√®re la sant√© du syst√®me"""
    try:
        return system_service.get_system_health()
    except Exception as e:
        logger.exception("üí• Erreur lors de la r√©cup√©ration de la sant√© du syst√®me")
        raise create_api_error(
            ErrorCode.SERVICE_UNAVAILABLE,
            "Impossible de r√©cup√©rer la sant√© du syst√®me",
            {"original_error": str(e)}
        )

@app.get("/api/sensors/status")
async def get_sensors_status(current_user: User = Depends(get_current_user)):
    """R√©cup√®re le statut de tous les capteurs"""
    try:
        sensors_status = {}
        for sensor_id in sensor_service.sensors.keys():
            sensors_status[sensor_id] = sensor_service.get_sensor_status(sensor_id)
        return {"sensors": sensors_status}
    except Exception as e:
        logger.exception("üí• Erreur lors de la r√©cup√©ration du statut des capteurs")
        raise create_api_error(
            ErrorCode.SERVICE_UNAVAILABLE,
            "Impossible de r√©cup√©rer le statut des capteurs",
            {"original_error": str(e)}
        )

@app.get("/api/sensors/{sensor_id}/statistics")
async def get_sensor_statistics(
    sensor_id: str,
    hours: int = 24,
    current_user: User = Depends(get_current_user)
):
    """R√©cup√®re les statistiques d'un capteur"""
    try:
        return sensor_service.get_sensor_statistics(sensor_id, hours)
    except Exception as e:
        logger.exception(f"üí• Erreur lors de la r√©cup√©ration des statistiques du capteur {sensor_id}")
        raise create_api_error(
            ErrorCode.SERVICE_UNAVAILABLE,
            f"Impossible de r√©cup√©rer les statistiques du capteur {sensor_id}",
            {"original_error": str(e)}
        )

@app.post("/api/sensors/{sensor_id}/calibrate")
async def calibrate_sensor(
    sensor_id: str,
    reference_values: List[Dict[str, float]],
    current_user: User = Depends(require_admin)
):
    """Calibre un capteur (admin uniquement)"""
    try:
        # Convertir les donn√©es en tuples
        calibration_points = [(point["raw"], point["expected"]) for point in reference_values]
        
        success = sensor_service.calibrate_sensor(sensor_id, calibration_points)
        
        logger.info(f"üîß Capteur calibr√©: {sensor_id}", {
            "user": current_user.username,
            "points_count": len(calibration_points)
        })
        
        return {"success": success, "sensor_id": sensor_id}
        
    except Exception as e:
        logger.exception(f"üí• Erreur lors de la calibration du capteur {sensor_id}")
        raise create_api_error(
            ErrorCode.SENSOR_CALIBRATION_FAILED,
            f"Erreur lors de la calibration du capteur {sensor_id}",
            {"original_error": str(e)}
        )

@app.get("/api/config/info")
async def get_config_info(current_user: User = Depends(get_current_user)):
    """R√©cup√®re les informations sur toutes les configurations"""
    try:
        return config_service.get_all_configs_info()
    except Exception as e:
        logger.exception("üí• Erreur lors de la r√©cup√©ration des informations de configuration")
        raise create_api_error(
            ErrorCode.CONFIGURATION_INVALID,
            "Impossible de r√©cup√©rer les informations de configuration",
            {"original_error": str(e)}
        )

# Endpoints pour la qualit√© de l'air
@app.get("/api/air-quality/status")
async def get_air_quality_status(current_user: User = Depends(get_current_user)):
    """R√©cup√®re le statut de la qualit√© de l'air"""
    try:
        if 'air_quality' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur de qualit√© de l'air non disponible",
                {"controller": "air_quality"}
            )
        
        status = controllers['air_quality'].get_status()
        return {"air_quality": status}
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_READ_FAILED,
            "Impossible de r√©cup√©rer le statut de la qualit√© de l'air",
            {"original_error": str(e)}
        )

@app.post("/api/air-quality/control-ventilation")
async def control_ventilation_with_air_quality(current_user: User = Depends(require_admin)):
    """Contr√¥le la ventilation bas√©e sur la qualit√© de l'air"""
    try:
        if 'air_quality' not in controllers or 'fan' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leurs air_quality ou fan non disponibles",
                {"controllers": ["air_quality", "fan"]}
            )
        
        success = controllers['air_quality'].control_ventilation(controllers['fan'])
        return {"success": success, "message": "Contr√¥le ventilation bas√© sur la qualit√© de l'air"}
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible de contr√¥ler la ventilation bas√©e sur la qualit√© de l'air",
            {"original_error": str(e)}
        )

@app.post("/api/air-quality/calibrate")
async def calibrate_air_quality_sensor(current_user: User = Depends(require_admin)):
    """Calibre le capteur de qualit√© de l'air"""
    try:
        if 'air_quality' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur de qualit√© de l'air non disponible",
                {"controller": "air_quality"}
            )
        
        success = controllers['air_quality'].calibrate_sensor()
        return {"calibrated": success, "message": "Calibration du capteur de qualit√© de l'air"}
    except Exception as e:
        raise create_api_error(
            ErrorCode.SENSOR_CALIBRATION_FAILED,
            "Impossible de calibrer le capteur de qualit√© de l'air",
            {"original_error": str(e)}
        )

# Endpoints pour le contr√¥leur LCD Menu
@app.get("/api/lcd-menu/status")
async def get_lcd_menu_status(current_user: User = Depends(get_current_user)):
    """R√©cup√®re le statut du contr√¥leur LCD menu"""
    try:
        if 'lcd_menu' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur LCD menu non disponible",
                {"controller": "lcd_menu"}
            )
        
        status = controllers['lcd_menu'].get_status()
        return {"lcd_menu": status}
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_READ_FAILED,
            "Impossible de r√©cup√©rer le statut du contr√¥leur LCD menu",
            {"original_error": str(e)}
        )

@app.post("/api/lcd-menu/navigate")
async def navigate_lcd_menu(
    direction: str,
    current_user: User = Depends(get_current_user)
):
    """Navigation dans le menu LCD"""
    try:
        if 'lcd_menu' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur LCD menu non disponible",
                {"controller": "lcd_menu"}
            )
        
        # Simulation de navigation (les boutons physiques g√®rent d√©j√† la navigation)
        return {"success": True, "message": f"Navigation {direction} simul√©e"}
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible de naviguer dans le menu LCD",
            {"original_error": str(e)}
        )

@app.post("/api/lcd-menu/select")
async def select_lcd_menu_item(current_user: User = Depends(get_current_user)):
    """S√©lectionne l'√©l√©ment actuel du menu LCD"""
    try:
        if 'lcd_menu' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur LCD menu non disponible",
                {"controller": "lcd_menu"}
            )
        
        # Simulation de s√©lection (les boutons physiques g√®rent d√©j√† la s√©lection)
        return {"success": True, "message": "S√©lection simul√©e"}
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible de s√©lectionner l'√©l√©ment du menu LCD",
            {"original_error": str(e)}
        )

# Endpoints pour le contr√¥leur de brumisateur ultrasonique
@app.get("/api/ultrasonic-mist/status")
async def get_ultrasonic_mist_status(current_user: User = Depends(get_current_user)):
    """R√©cup√®re le statut du brumisateur ultrasonique"""
    try:
        if 'ultrasonic_mist' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur brumisateur ultrasonique non disponible",
                {"controller": "ultrasonic_mist"}
            )
        
        status = controllers['ultrasonic_mist'].get_status()
        return {"ultrasonic_mist": status}
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_READ_FAILED,
            "Impossible de r√©cup√©rer le statut du brumisateur ultrasonique",
            {"original_error": str(e)}
        )

@app.post("/api/ultrasonic-mist/activate")
async def activate_ultrasonic_mist(
    intensity: int = 50,
    duration: Optional[float] = None,
    current_user: User = Depends(get_current_user)
):
    """Active le brumisateur ultrasonique"""
    try:
        if 'ultrasonic_mist' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur brumisateur ultrasonique non disponible",
                {"controller": "ultrasonic_mist"}
            )
        
        success = controllers['ultrasonic_mist'].activate_mist(intensity, duration)
        return {
            "success": success,
            "message": f"Brumisateur activ√© avec intensit√© {intensity}%",
            "duration": duration
        }
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible d'activer le brumisateur ultrasonique",
            {"original_error": str(e)}
        )

@app.post("/api/ultrasonic-mist/deactivate")
async def deactivate_ultrasonic_mist(current_user: User = Depends(get_current_user)):
    """D√©sactive le brumisateur ultrasonique"""
    try:
        if 'ultrasonic_mist' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur brumisateur ultrasonique non disponible",
                {"controller": "ultrasonic_mist"}
            )
        
        success = controllers['ultrasonic_mist'].deactivate_mist()
        return {
            "success": success,
            "message": "Brumisateur d√©sactiv√©"
        }
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible de d√©sactiver le brumisateur ultrasonique",
            {"original_error": str(e)}
        )

@app.post("/api/ultrasonic-mist/mode/{mode_name}")
async def run_mist_mode(
    mode_name: str,
    current_user: User = Depends(get_current_user)
):
    """Ex√©cute un mode d'humidification pr√©d√©fini"""
    try:
        if 'ultrasonic_mist' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur brumisateur ultrasonique non disponible",
                {"controller": "ultrasonic_mist"}
            )
        
        success = controllers['ultrasonic_mist'].run_mist_mode(mode_name)
        return {
            "success": success,
            "message": f"Mode {mode_name} ex√©cut√©",
            "mode": mode_name
        }
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            f"Impossible d'ex√©cuter le mode {mode_name}",
            {"original_error": str(e)}
        )

@app.post("/api/ultrasonic-mist/emergency-stop")
async def emergency_stop_mist(current_user: User = Depends(get_current_user)):
    """Arr√™t d'urgence du brumisateur ultrasonique"""
    try:
        if 'ultrasonic_mist' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur brumisateur ultrasonique non disponible",
                {"controller": "ultrasonic_mist"}
            )
        
        success = controllers['ultrasonic_mist'].emergency_stop()
        return {
            "success": success,
            "message": "Arr√™t d'urgence du brumisateur effectu√©"
        }
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible d'arr√™ter le brumisateur en urgence",
            {"original_error": str(e)}
        )

# Endpoints pour le niveau d'eau
@app.get("/api/water-level/status")
async def get_water_level_status(current_user: User = Depends(get_current_user)):
    """R√©cup√®re le statut du capteur de niveau d'eau"""
    try:
        if 'water_level' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur niveau d'eau non disponible",
                {"controller": "water_level"}
            )
        
        status = controllers['water_level'].get_status()
        return {"water_level": status}
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_READ_FAILED,
            "Impossible de r√©cup√©rer le statut du niveau d'eau",
            {"original_error": str(e)}
        )

@app.get("/api/water-level/read")
async def read_water_level(current_user: User = Depends(get_current_user)):
    """Lit le niveau d'eau actuel"""
    try:
        if 'water_level' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur niveau d'eau non disponible",
                {"controller": "water_level"}
            )
        
        level_data = controllers['water_level'].read_water_level()
        return {"water_level_data": level_data}
    except Exception as e:
        raise create_api_error(
            ErrorCode.SENSOR_READ_FAILED,
            "Impossible de lire le niveau d'eau",
            {"original_error": str(e)}
        )

@app.get("/api/water-level/check-availability")
async def check_water_availability(current_user: User = Depends(get_current_user)):
    """V√©rifie si suffisamment d'eau est disponible"""
    try:
        if 'water_level' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur niveau d'eau non disponible",
                {"controller": "water_level"}
            )
        
        is_available = controllers['water_level'].is_water_available()
        trend = controllers['water_level'].get_level_trend()
        
        return {
            "water_available": is_available,
            "trend": trend,
            "message": "Eau disponible" if is_available else "Niveau d'eau critique"
        }
    except Exception as e:
        raise create_api_error(
            ErrorCode.SENSOR_READ_FAILED,
            "Impossible de v√©rifier la disponibilit√© de l'eau",
            {"original_error": str(e)}
        )

# Endpoints pour la temp√©rature du radiateur
@app.get("/api/radiator-temp/status")
async def get_radiator_temp_status(current_user: User = Depends(get_current_user)):
    """R√©cup√®re le statut du capteur de temp√©rature radiateur"""
    try:
        if 'radiator_temp' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur temp√©rature radiateur non disponible",
                {"controller": "radiator_temp"}
            )
        
        status = controllers['radiator_temp'].get_status()
        return {"radiator_temp": status}
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_READ_FAILED,
            "Impossible de r√©cup√©rer le statut de la temp√©rature radiateur",
            {"original_error": str(e)}
        )

@app.get("/api/radiator-temp/read")
async def read_radiator_temperature(current_user: User = Depends(get_current_user)):
    """Lit la temp√©rature du radiateur"""
    try:
        if 'radiator_temp' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur temp√©rature radiateur non disponible",
                {"controller": "radiator_temp"}
            )
        
        temp_data = controllers['radiator_temp'].read_temperature()
        return {"radiator_temperature": temp_data}
    except Exception as e:
        raise create_api_error(
            ErrorCode.SENSOR_READ_FAILED,
            "Impossible de lire la temp√©rature du radiateur",
            {"original_error": str(e)}
        )

@app.get("/api/radiator-temp/safety-check")
async def radiator_safety_check(current_user: User = Depends(get_current_user)):
    """V√©rification de s√©curit√© rapide du radiateur"""
    try:
        if 'radiator_temp' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur temp√©rature radiateur non disponible",
                {"controller": "radiator_temp"}
            )
        
        safety_result = controllers['radiator_temp'].emergency_check()
        return {"safety_check": safety_result}
    except Exception as e:
        raise create_api_error(
            ErrorCode.SENSOR_READ_FAILED,
            "Impossible d'effectuer la v√©rification de s√©curit√©",
            {"original_error": str(e)}
        )

@app.get("/api/radiator-temp/is-safe")
async def is_radiator_safe(current_user: User = Depends(get_current_user)):
    """V√©rifie si la temp√©rature du radiateur est s√ªre"""
    try:
        if 'radiator_temp' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur temp√©rature radiateur non disponible",
                {"controller": "radiator_temp"}
            )
        
        is_safe = controllers['radiator_temp'].is_safe_temperature()
        trend = controllers['radiator_temp'].get_temperature_trend()
        
        return {
            "is_safe": is_safe,
            "trend": trend,
            "message": "Temp√©rature s√ªre" if is_safe else "Temp√©rature dangereuse"
        }
    except Exception as e:
        raise create_api_error(
            ErrorCode.SENSOR_READ_FAILED,
            "Impossible de v√©rifier la s√©curit√© de la temp√©rature",
            {"original_error": str(e)}
        )

# Endpoints pour la cam√©ra CSI
@app.get("/api/camera/status")
async def get_camera_status(current_user: User = Depends(get_current_user)):
    """R√©cup√®re le statut de la cam√©ra"""
    try:
        if 'camera' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur cam√©ra non disponible",
                {"controller": "camera"}
            )
        
        status = controllers['camera'].get_status()
        return {"camera": status}
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_READ_FAILED,
            "Impossible de r√©cup√©rer le statut de la cam√©ra",
            {"original_error": str(e)}
        )

@app.get("/api/camera/capture")
async def capture_image(current_user: User = Depends(get_current_user)):
    """Capture une image depuis la cam√©ra"""
    try:
        if 'camera' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur cam√©ra non disponible",
                {"controller": "camera"}
            )
        
        image_data = controllers['camera'].capture_image()
        
        logger.info("Image captur√©e via API", {
            "user": current_user.username,
            "size_bytes": len(image_data)
        })
        
        return StreamingResponse(
            io.BytesIO(image_data),
            media_type="image/jpeg",
            headers={"Content-Disposition": "inline; filename=capture.jpg"}
        )
        
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible de capturer une image",
            {"original_error": str(e)}
        )

@app.post("/api/camera/snapshot")
async def take_snapshot(current_user: User = Depends(get_current_user)):
    """Prend un snapshot et le sauvegarde"""
    try:
        if 'camera' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur cam√©ra non disponible",
                {"controller": "camera"}
            )
        
        snapshot_path = controllers['camera'].take_snapshot()
        
        logger.info("Snapshot pris via API", {
            "user": current_user.username,
            "path": snapshot_path
        })
        
        return {
            "success": True,
            "snapshot_path": snapshot_path,
            "message": "Snapshot sauvegard√© avec succ√®s"
        }
        
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible de prendre un snapshot",
            {"original_error": str(e)}
        )

@app.post("/api/camera/streaming/start")
async def start_camera_streaming(current_user: User = Depends(get_current_user)):
    """D√©marre le streaming vid√©o"""
    try:
        if 'camera' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur cam√©ra non disponible",
                {"controller": "camera"}
            )
        
        success = controllers['camera'].start_streaming()
        
        logger.info("Streaming cam√©ra d√©marr√© via API", {
            "user": current_user.username,
            "success": success
        })
        
        return {
            "success": success,
            "message": "Streaming d√©marr√©" if success else "√âchec d√©marrage streaming"
        }
        
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible de d√©marrer le streaming",
            {"original_error": str(e)}
        )

@app.post("/api/camera/streaming/stop")
async def stop_camera_streaming(current_user: User = Depends(get_current_user)):
    """Arr√™te le streaming vid√©o"""
    try:
        if 'camera' not in controllers:
            raise create_api_error(
                ErrorCode.CONTROLLER_NOT_FOUND,
                "Contr√¥leur cam√©ra non disponible",
                {"controller": "camera"}
            )
        
        success = controllers['camera'].stop_streaming()
        
        logger.info("Streaming cam√©ra arr√™t√© via API", {
            "user": current_user.username,
            "success": success
        })
        
        return {
            "success": success,
            "message": "Streaming arr√™t√©" if success else "√âchec arr√™t streaming"
        }
        
    except Exception as e:
        raise create_api_error(
            ErrorCode.CONTROLLER_CONTROL_FAILED,
            "Impossible d'arr√™ter le streaming",
            {"original_error": str(e)}
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)