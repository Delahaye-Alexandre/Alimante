[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "alimante"
version = "1.0.0"
description = "Système de gestion automatisée des mantes avec Raspberry Pi"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Alimante Team", email = "contact@alimante.com"}
]
keywords = ["mantes", "raspberry-pi", "automation", "iot", "sensors"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Home Automation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "RPi.GPIO>=0.7.1",
    "adafruit-circuitpython-dht>=1.4.0",
    "adafruit-circuitpython-servokit>=1.3.8",
    "adafruit-circuitpython-busdevice>=5.2.6",
    "adafruit-circuitpython-register>=1.9.8",
    "astral>=3.2",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "fastapi-cors>=0.0.6",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "psutil>=5.9.0",
    "colorlog>=6.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

[project.scripts]
alimante = "main:main"

[project.urls]
Homepage = "https://github.com/alimante/alimante"
Documentation = "https://alimante.readthedocs.io"
Repository = "https://github.com/alimante/alimante.git"
Issues = "https://github.com/alimante/alimante/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = ["E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".venv",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--import-mode=importlib",
    "--rootdir=.",
]
markers = [
    "unit: Tests unitaires",
    "integration: Tests d'intégration",
    "hardware: Tests matériels",
    "slow: Tests lents",
    "api: Tests de l'API",
    "controllers: Tests des contrôleurs",
    "services: Tests des services",
    "utils: Tests des utilitaires",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]
